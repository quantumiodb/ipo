// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IpoStock {
  id              String    @id @default(cuid())
  symbol          String    
  companyName     String
  market          Market
  expectedPrice   Float?
  priceRange      String?
  sharesOffered   Int?
  ipoDate         DateTime?
  status          IpoStatus @default(UPCOMING)
  description     String?
  sector          String?
  industry        String?
  underwriters    String[]
  marketCap       Float?
  revenue         Float?
  netIncome       Float?
  employees       Int?
  website         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("ipo_stocks")
}

enum Market {
  US
  HK
}

enum IpoStatus {
  UPCOMING
  PRICING
  LISTED
  WITHDRAWN
  POSTPONED
}

model McpApp {
  id              String      @id @default(cuid())
  name            String
  fullName        String      // owner/repo format
  description     String?
  category        McpCategory @default(OTHER)
  githubUrl       String      @unique
  homepage        String?
  author          String
  stars           Int         @default(0)
  forks           Int         @default(0)
  issues          Int         @default(0)
  lastUpdated     DateTime?
  createdAt       DateTime
  language        String?
  license         String?
  topics          String[]    // GitHub topics/tags
  readme          String?
  isOfficial      Boolean     @default(false)
  popularityScore Float       @default(0)
  status          McpStatus   @default(ACTIVE)
  syncedAt        DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([category, popularityScore])
  @@index([stars])
  @@index([popularityScore])
  @@map("mcp_apps")
}

enum McpCategory {
  DEVELOPMENT
  PRODUCTIVITY  
  DATA_ANALYSIS
  CLOUD_SERVICES
  AI_ML
  AUTOMATION
  SECURITY
  COMMUNICATION
  CREATIVE
  FINANCE
  ENTERPRISE
  TESTING
  DATABASE
  WEB_SCRAPING
  OTHER
}

enum McpStatus {
  ACTIVE
  DEPRECATED
  EXPERIMENTAL
  ARCHIVED
}

model AIAgent {
  id              String         @id @default(cuid())
  name            String
  description     String?
  category        AIAgentCategory @default(OTHER)
  website         String?
  creator         String
  users           Int            @default(0)
  rating          Float          @default(0.0)
  featured        Boolean        @default(false)
  capabilities    String[]       @default([])
  tags            String[]       @default([])
  verified        Boolean        @default(false)
  pricing         PricingType    @default(FREE)
  popularityScore Float          @default(0.0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastUpdated     DateTime       @default(now())
  syncedAt        DateTime       @default(now())

  @@map("ai_agents")
}

enum AIAgentCategory {
  PRODUCTIVITY
  CODING
  CONTENT
  RESEARCH
  CUSTOMER_SERVICE
  MARKETING
  EDUCATION
  FINANCE
  HEALTHCARE
  CREATIVE
  AUTOMATION
  ANALYTICS
  COMMUNICATION
  ENTERTAINMENT
  OTHER
}

enum PricingType {
  FREE
  FREEMIUM
  PAID
}

// SEC Filing Models
model FilingDocument {
  id              String            @id @default(cuid())
  accessionNo     String            @unique // SEC accession number
  cik             String            // Company CIK
  ticker          String
  companyName     String
  formType        String            // 10-K, 10-Q, etc.
  filedAt         DateTime
  periodOfReport  DateTime?         // Report period end date
  linkToHtml      String
  linkToTxt       String?
  linkToFilingDetails String
  description     String?
  
  // Content metadata
  contentLength   Int?              // HTML content length
  tablesFound     Int               @default(0)
  sectionsFound   Int               @default(0)
  
  // Processing status
  isContentFetched Boolean          @default(false)
  isAnalyzed      Boolean          @default(false)
  
  // Relationships
  content         FilingContent?
  analyses        FilingAnalysis[]
  
  // Timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([ticker, formType])
  @@index([ticker, filedAt])
  @@index([cik])
  @@map("filing_documents")
}

model FilingContent {
  id              String            @id @default(cuid())
  filingId        String            @unique
  filing          FilingDocument    @relation(fields: [filingId], references: [id], onDelete: Cascade)
  
  // Content data
  rawHtml         String            @db.Text // Full HTML content
  analyzedContent String            @db.Text // AI-processed summary content
  
  // Extracted sections
  financialTables String[]          @default([]) // JSON strings of financial tables
  textSections    String[]          @default([]) // Key text sections
  
  // Content processing metadata
  processedAt     DateTime          @default(now())
  processingTime  Int?              // milliseconds
  
  @@map("filing_contents")
}

model FilingAnalysis {
  id              String            @id @default(cuid())
  filingId        String
  filing          FilingDocument    @relation(fields: [filingId], references: [id], onDelete: Cascade)
  
  // Analysis metadata
  analysisType    String            // "financial", "risk", "outlook", etc.
  aiModel         String            // Which AI model was used
  
  // AI Analysis Results
  summary         String?           @db.Text // Brief analysis summary
  keyFindings     String[]          @default([]) // Key findings array
  strengths       String[]          @default([]) // Company strengths
  weaknesses      String[]          @default([]) // Company weaknesses  
  risks           String[]          @default([]) // Risk factors
  opportunities   String[]          @default([]) // Growth opportunities
  
  // Financial metrics extracted by AI
  revenue         Float?
  netIncome       Float?
  totalAssets     Float?
  totalDebt       Float?
  cashAndEquivalents Float?
  
  // Analysis scores (0-100)
  overallScore    Float?            // Overall financial health score
  profitabilityScore Float?         // Profitability analysis score
  liquidityScore  Float?            // Liquidity analysis score
  solvencyScore   Float?            // Solvency analysis score
  
  // Investment recommendation
  recommendation  String?           // "Buy", "Hold", "Sell", "Watch"
  confidenceScore Float?            // AI confidence in analysis (0-100)
  targetPrice     Float?            // AI-suggested target price
  priceRange      String?           // Expected price range
  
  // Processing metadata
  processingTime  Int?              // Analysis time in milliseconds
  createdAt       DateTime          @default(now())
  
  @@index([filingId, analysisType])
  @@map("filing_analyses")
}